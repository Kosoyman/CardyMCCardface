-//TODO: Remove the bad, hidden, dependency between the controller and view (new game, hit, stand)

-//TODO: Design and implement a variable rules for who wins the game.
This variation could for example vary who wins on an equal score (in one implementation the Dealer wins, in the other the Player).
The design should make it easy to add other variants without changing the Dealer.

-//TODO: The code for getting a card from the deck, show the card and give it to a player is duplicated in a number of places.
Make a refactoring to remove this duplication and that supports low coupling/high cohesion. The code that is duplicated i similar to this:
    Card c = deck.GetCard();
    c.Show(true/false)
    player.DealCard(c);

-//TODO: Use the Observer-pattern to send an event to the user interface that a player has got a new card in his hand.
 When the event is handled the user interface should be redrawn to show the new hand (with the new card) and the game should be briefly paused,
  to make the game a bit more exciting, the pausing code should be in the user interface (view or controller) and not in the model.
  The pause should be when any player (dealer or player) gets a card.

-//TODO: Update the class diagram to reflect the changes you make
(it is not necessary to recreate the whole diagram only the parts that have been affected by your changes).